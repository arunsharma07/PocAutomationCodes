public class submitRequest {

	public static void main(String[] args) throws Exception {
		try {
			submitRequest s = new submitRequest();
			InputStream input; // creating object of InputStream to fetch the Properties file storing services
			input = new FileInputStream(".//src//main//resources//Properties//multiPrice.properties");
			Properties prop = new Properties();
			prop.load(input);
      
      // converting request service in string format to JSONObject
			JSONObject jsonData1 = new JSONObject(prop.getProperty("getpriceRequest"));
      
      // creating object of HTTPClient to execute the request
			HttpClient cl = HttpClientBuilder.create().build();
      
      // creating the object of HttpPost to set endPoint URL and setting the entity
      HttpPost post = new HttpPost("<endPointURL>");
			StringEntity getPriceRequest = new StringEntity(prop.getProperty("getpriceRequest"));
			getPriceRequest.setContentType("application/json");
			post.setEntity(getPriceRequest);
      
      // creating the object of HTTP Response to store the result executed by HttpClient Object for post request
			HttpResponse response = cl.execute(post);
      
      // converting returned response entity to String
			String responseJson = EntityUtils.toString(response.getEntity());
      
      // Converting the Response in String format to JsonData
			JSONObject jsonData = new JSONObject(responseJson);
      
      // using getJsonObject from jsonData to fetch the value of header or elements of the request
			jsonData.getJSONObject("header").remove("txnId");
			for (int i = 0; i < jsonData.getJSONArray("priceResults").length(); i++) {
				System.out.println(jsonData.getJSONArray("priceResults").getJSONObject(i).get("resultId").toString());
				jsonData.getJSONArray("priceResults").getJSONObject(i).remove("resultId");
			}
      
			responseJson = jsonData.toString();
			JSONObject responseJsonData = new JSONObject(jsonData);
			Map<String, Object> map1 = new HashMap<String, Object>();
			Map<String, Object> map2 = new HashMap<String, Object>();
			ObjectMapper mapper = new ObjectMapper();
			
			// convert JSON string to Map
			map1 = mapper.readValue(jsonData.toString(), new TypeReference<Map<String, JsonNode>>(){});
			responseJsonData = new JSONObject(prop.getProperty("getpriceResponse"));
			map2 = mapper.readValue(prop.getProperty("getpriceResponse"), new TypeReference<Map<String, JsonNode>>(){});
			Assert.assertTrue(s.equalMaps(map1,map2));
		} catch (Exception e) {
			System.out.println(e);
		}

	}
	public boolean equalMaps(Map<String,Object>m1, Map<String,Object>m2) {
		   if (m1.size() != m2.size()){
		      return false;
		   }
		   for (String key: m1.keySet()){
			   System.out.println("Value in M1: "+m1.get(key));
		      if (!m1.get(key).equals(m2.get(key))){
		         return false;
		         }
		   }
		   return true;
	}
	public static Map<String,Object> getJSONInMap(String file,String requestName) throws Exception {
		Map<String, Object> map =null;
		try {
      InputStream input;
			input = new FileInputStream(file);
			// load a properties file
			Properties prop = new Properties();
			prop.load(input);
			JSONObject jsonData = new JSONObject(prop.getProperty(requestName));
			map= new HashMap<String, Object>();
			ObjectMapper mapper = new ObjectMapper();
			// convert JSON string to Map
			map = mapper.readValue(prop.getProperty(requestName), new TypeReference<Map<String, JsonNode>>(){});
			System.out.println("Values stored in map is " +map);
			} catch (JsonGenerationException e) {
				e.printStackTrace(); 
				} catch (JsonMappingException e) { 
					e.printStackTrace(); 
					} catch (IOException e) {
						e.printStackTrace(); 
						} 
		return map;
	}
}
